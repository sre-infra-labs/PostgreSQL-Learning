---
- name: install patroni packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ patroni_packages }}"
  register: package_status
  when: not (reinit_cluster is defined and reinit_cluster)

- name: Create conf directory
  ansible.builtin.file:
    path: /etc/patroni
    state: directory
    owner: postgres
    group: postgres
    mode: "0750"

- name: Read Consul Secret from vars file
  include_vars:
    file: defaults/consul_secret.yml

# - name: Debug Consul SecretID obtained from vars file
#   ansible.builtin.debug:
#     msg: "Consul SecretID: {{ consul_secret_id }}"

- name: Generate conf file "/etc/patroni/patroni.yml"
  ansible.builtin.template:
    src: templates/patroni.yml.j2
    dest: /etc/patroni/patroni.yml
    owner: postgres
    group: postgres
    mode: "0640"

- name: Create patroni log directory
  ansible.builtin.file:
    path: "{{ patroni_log_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: "0750"
  when: patroni_log_destination == 'logfile'

- name: Update Patroni systemd service to use correct config path
  ansible.builtin.lineinfile:
    path: /usr/lib/systemd/system/patroni.service
    regexp: '^(\s*)ConditionPathExists=.*$'
    line: '\1ConditionPathExists=/etc/patroni/patroni.yml'
    backrefs: yes
    backup: yes

- name: Update Patroni systemd service ExecStart path
  ansible.builtin.lineinfile:
    path: /usr/lib/systemd/system/patroni.service
    regexp: '^(\s*)ExecStart=(.+patroni)\s+.*$'
    line: '\1ExecStart=\2 /etc/patroni/patroni.yml'
    backrefs: yes

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Prepare PostgreSQL | make sure the postgresql log directory "{{ postgresql_log_dir }}" exists
  ansible.builtin.file:
    path: "{{ postgresql_log_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: "0700"

- name: Prepare PostgreSQL | make sure PostgreSQL data directory "{{ postgresql_data_dir }}" exists
  ansible.builtin.file:
    path: "{{ postgresql_data_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: "0700"

- name: Prepare PostgreSQL | make sure the data directory "{{ postgresql_data_dir }}" is empty
  ansible.builtin.file:
    path: "{{ postgresql_data_dir }}"
    state: "{{ item }}"
    owner: postgres
    group: postgres
    mode: "0700"
  loop:
    - absent
    - directory

- name: Create temp directory
  ansible.builtin.file:
    path: "{{ postgresql_stats_temp_directory_path }}"
    state: directory
    owner: postgres
    group: postgres
    mode: "0750"

- name: Prepare PostgreSQL | Archive directory
  ansible.builtin.file:
    path: "{{ postgresql_data_archive }}"
    owner: postgres
    group: postgres
    state: directory
    mode: "0700"

- name: Prepare PostgreSQL | script directory
  ansible.builtin.file:
    path: "{{ postgresql_scripts_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: "0744"

- name: test leader host
  debug:
    msg: is leader
  when: inventory_hostname in groups["leader"]

- name: test replica host
  debug:
    msg: is replica
  when: inventory_hostname in groups["replica"]

- block:  # start patroni on master
    - name: start patroni service on the Master server
      ansible.builtin.systemd:
        daemon_reload: true
        name: patroni
        state: restarted
        enabled: true

    - name: "wait for port {{ patroni_restapi_port }} to become open on the host"
      ansible.builtin.wait_for:
        port: "{{ patroni_restapi_port }}"
        host: "{{ hostvars[inventory_hostname]['inventory_hostname'] }}"
        state: started
        timeout: 180
        delay: 10
      ignore_errors: false
  when: inventory_hostname in groups["leader"]

- block:  # start patroni on replica
    - name: Start patroni service on Replica servers
      ansible.builtin.systemd:
        daemon_reload: true
        name: patroni
        state: restarted
        enabled: true

    - name: "Wait for port {{ patroni_restapi_port }} to become open on the host"
      ansible.builtin.wait_for:
        port: "{{ patroni_restapi_port }}"
        host: "{{ hostvars[inventory_hostname]['inventory_hostname'] }}"
        state: started
        timeout: 180
        delay: 10
      ignore_errors: false
  when: inventory_hostname in groups["replica"]

