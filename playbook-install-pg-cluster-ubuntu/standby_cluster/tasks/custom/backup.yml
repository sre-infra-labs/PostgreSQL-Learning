

- name: Ensure script directory exists
  file:
    path: "{{ postgresql_home_dir }}/{{ postgresql_version }}/scripts"
    state: directory
    owner: postgres
    group: postgres
    mode: "0755"

- name: Deploy the backup script
  copy:
    dest: "{{ postgresql_home_dir }}/{{ postgresql_version }}/scripts/backup.sh"
    content: |
      #!/bin/bash

      # Slack webhook URL for sending notifications
      SLACK_WEBHOOK_URL="{{ slack_blocks_webhook_url }}"

      # Function to send a message to Slack
      send_slack_notification()
      {
          message="$1"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$message\"}" "$SLACK_WEBHOOK_URL"
      }

      # Get the hostname
      hostname=$(hostname)

      # Define the path to the log file
      LOG_FILE="{{ postgresql_home_dir }}/{{ postgresql_version }}/backups/pgbackrest_backup_$(date +'%Y-%m-%d_%H-%M-%S').log"

      # Check if the Patroni role is master using the hostname
      PATRONI_ROLE=$(curl -s http://"$hostname":8008/patroni | jq -r .role)

      # Proceed only if role is primary, master, or leader
      if [[ "$PATRONI_ROLE" == "primary" || "$PATRONI_ROLE" == "master" || "$PATRONI_ROLE" == "leader" ]]; then
          echo "Backup allowed on host $hostname with role: $PATRONI_ROLE." | tee -a "$LOG_FILE"
      else
          echo "Backup aborted on host $hostname with role: $PATRONI_ROLE at $(date)." | tee -a "$LOG_FILE"
          exit 1
      fi

      # Extract the first non-global stanza name from pgbackrest.conf
      pgbackrest_stanza_name=$(grep -oP '^\[\K[^]]+' /etc/pgbackrest/pgbackrest.conf | grep -v '^global$' | head -n 1)

      # Run pgBackRest backup with debug logging and redirect both stdout and stderr to the log file
      /usr/bin/pgbackrest  --stanza=$pgbackrest_stanza_name  --type=full --log-level-file=debug backup > "$LOG_FILE" 2>&1

      # Only while testing backup, enable below to generate error
      #result=$(expr 1 / 0)

      # Check if the backup command was successful
      if [ $? -ne 0 ]; then
          error_message="Error: Failed to backup database on host $hostname "

          echo "$error_message" | tee -a "$LOG_FILE"
          send_slack_notification "$error_message"
          exit 1
      else
          echo "Backup completed successfully on host $hostname at $(date)." | tee -a "$LOG_FILE"
      fi

      # Clean up old backup logs (older than 7 days)
      chmod +x "$LOG_FILE"
      find {{ postgresql_home_dir }}/{{ postgresql_version }}/backups -type f -name "pgbackrest_backup*.log" -mtime +7 -exec rm {} \;
    owner: postgres
    group: postgres
    mode: "0750"

- name: Ensure backups directory exists
  file:
    path: "{{ postgresql_home_dir }}/{{ postgresql_version }}/backups"
    state: directory
    owner: postgres
    group: postgres
    mode: "0755"

- name: Add cron job for the backup script
  cron:
    name: "pgBackRest Backup"
    user: root
    job: "sudo -u postgres {{ postgresql_home_dir }}/{{ postgresql_version }}/scripts/backup.sh"
    minute: "0"
    hour: "20"
    day: "*"
    month: "*"
    weekday: "*"
    state: present


